//pingpong template file for ECE530 Lab #6
//Pingpong game by Keith Hoover
//Version 2 to use loops and arrays
//Revised by Jianjian Song to add pressing early penalty, 3-23-2016
#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
// Include scutimer header file
#include "XScuTimer.h"
//====================================================
XScuTimer Timer; /* Cortex A9 SCU Private Timer Instance */
void delay(void);
void MoveBallRight(void);
void MoveBallLeft(void);

#define ONE_TENTH 32500000 // half of the CPU clock speed/10
#define START 1
#define STOP 0
#define LEFT 0
#define RIGHT 1
#define RESETBUTTON 0b0100
#define STARTBUTTON 0b0010
#define LEFTPADDLE 0b1000
#define RIGHTPADDLE 0b0001
#define TRUE 1
#define FALSE 0
#define LEFTMOST 0
#define RIGHTMOST 3

int psb_check, dip_check, dip_check_prev, LedState, Status;
XGpio dip, push;
// PS Timer related definitions
XScuTimer_Config *ConfigPtr;
XScuTimer *TimerInstancePtr = &Timer;

int LED_PATTERNS[4] = { 0b1000, 0b0100, 0b0010, 0b0001 };
int scoreright, scoreleft;
char GameOver, StartDirection;

int main(void) {
	unsigned int i;
	char leftCheck;
	char rightCheck;
	char fall = FALSE;
	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;
	XScuTimer *TimerInstancePtr = &Timer;

	//initialize variables, timers, ports
	XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID);
	XGpio_SetDataDirection(&dip, 1, 0xffffffff);

	XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID);
	XGpio_SetDataDirection(&push, 1, 0xffffffff);

	// Initialize the timer
	ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
			ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		xil_printf("Timer init() failed\r\n");
		return XST_FAILURE;
	}

	// Read dip switch values
	dip_check_prev = XGpio_DiscreteRead(&dip, 1);
	// Load timer with delay in multiple of ONE_TENTH
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check_prev);
	// Set AutoLoad mode
	XScuTimer_EnableAutoReload(TimerInstancePtr);
	// Start the timer
	XScuTimer_Start(TimerInstancePtr);

	xil_printf("-- Start of the Ping Pong Program --\r\n");
	GameOver = STOP;
	scoreright = 0;
	scoreleft = 0;
	xil_printf("Score Left = %d   Score Right = %d\r\n", scoreright, scoreleft);
	StartDirection = LEFT;
	while (1) {

		dip_check = XGpio_DiscreteRead(&dip, 1);
		if (dip_check != dip_check_prev) {
			xil_printf("DIP Switch Status %x, %x\r\n", dip_check_prev,
					dip_check);
			dip_check_prev = dip_check;
			// load timer with the new switch settings
			XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check);
		}
		// Read push buttons and reset score if Button 2 is pressed
		psb_check = XGpio_DiscreteRead(&push, 1);
//		LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0, 0);
		if (psb_check == RESETBUTTON)	//reset game
				{
			xil_printf("\n\rNew Game - Scores Reset\r\n");
			LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0, 0);
			scoreleft = 0;
			scoreright = 0;
			GameOver = STOP;
		}
		if (psb_check == STARTBUTTON && GameOver == STOP) {

//		  StartDirection = ~StartDirection;
			if (StartDirection == LEFT) {
				StartDirection = RIGHT;
				LedState = LEFTMOST;
			} else {
				StartDirection = LEFT;
				LedState = RIGHTMOST;
			}
			while (!XScuTimer_IsExpired(TimerInstancePtr))
				;
			XScuTimer_ClearInterruptStatus(TimerInstancePtr);
			GameOver = START;	//start game
//		  LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0, LED_PATTERNS[LedState]);
		}
		if (GameOver == START && fall == TRUE
				&& (LedState == LEFTMOST || LedState == RIGHTMOST)) {
			if (StartDirection == LEFT) {
				scoreleft++;
			} else {
				scoreright++;
			}
			fall = FALSE;
			xil_printf("Score Left = %d   Score Right = %d\r\n", scoreright,
					scoreleft);
			LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0,
					LED_PATTERNS[LedState]);
			while (!XScuTimer_IsExpired(TimerInstancePtr))
				;
			XScuTimer_ClearInterruptStatus(TimerInstancePtr);
			LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0, 0);
			GameOver = STOP;
		}
		if (GameOver == START) {
//			xil_printf("StartDir: %d\r\n", StartDirection);
			LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0,
					LED_PATTERNS[LedState]);
			if (XScuTimer_IsExpired(TimerInstancePtr)) {
//				xil_printf("LedState: %d\r\n", LED_PATTERNS[LedState]);
//				LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0, LED_PATTERNS[LedState]);

				// output the count to LED and increment the count
				if (StartDirection == RIGHT && LedState < RIGHTMOST) {
					LedState++;
					// clear status bit
					XScuTimer_ClearInterruptStatus(TimerInstancePtr);
					if (rightCheck == TRUE) {
						fall = TRUE;
					}
				} else if (StartDirection == LEFT && LedState > LEFTMOST) {
					LedState--;
					// clear status bit
					XScuTimer_ClearInterruptStatus(TimerInstancePtr);
					if (leftCheck == TRUE) {
						fall = TRUE;
					}
				} else if (StartDirection
						== RIGHT&& LedState >= RIGHTMOST && fall == FALSE) {
					if (rightCheck == TRUE && LedState == RIGHTMOST) {
						fall = FALSE;
						StartDirection = LEFT;
						LedState--;
						// clear status bit
						XScuTimer_ClearInterruptStatus(TimerInstancePtr);
					} else {
						fall = TRUE;
					}
				} else if (StartDirection
						== LEFT&& LedState <= LEFTMOST && fall ==FALSE) {
					if (leftCheck == TRUE && LedState == LEFTMOST) {
						fall = FALSE;
						StartDirection = RIGHT;
						LedState++;
						// clear status bit
						XScuTimer_ClearInterruptStatus(TimerInstancePtr);
					} else {
						fall = TRUE;
					}
				}
			}
			psb_check = XGpio_DiscreteRead(&push, 1);
			if (StartDirection == LEFT) {
				rightCheck = FALSE;
				if (psb_check == LEFTPADDLE) {
					leftCheck = TRUE;
				}
			}
			if (StartDirection == RIGHT) {
				leftCheck = FALSE;
				if (psb_check == RIGHTPADDLE) {
					rightCheck = TRUE;
				}
			}

		}

		//start the game and follow StartDirection}
	}	//while(1)
} //main()

void MoveBallRight(void) {
	char i, EarlyPress;
	EarlyPress = 0;
//move LED to the right
// check for button pushes
//set StartDirection
//set GameOver; display scores
}

void MoveBallLeft(void) {
	char i, EarlyPress;
	EarlyPress = 0;
//move LED to the left
// check for button pushes
//set StartDirection
//set GameOver, update and display scores

}

void delay(void) {
	// Read dip switch values
	dip_check = XGpio_DiscreteRead(&dip, 1);
	// Load timer with delay in multiple of ONE_T
}
