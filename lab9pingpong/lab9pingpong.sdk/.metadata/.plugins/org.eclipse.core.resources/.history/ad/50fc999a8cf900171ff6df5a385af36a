//pingpong template file for ECE530 Lab #6
#include "xparameters.h"
#include "xgpio.h"
#include "led_ip.h"
// Include scutimer header file
#include "XScuTimer.h"
#include "xtmrctr.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"

//====================================================

// Parameter definitions
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID
#define TMR_DEVICE_ID		XPAR_TMRCTR_0_DEVICE_ID
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define LEDS_DEVICE_ID		XPAR_AXI_GPIO_1_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define INTC_TMR_INTERRUPT_ID XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR

#define BTN_INT 			XGPIO_IR_CH1_MASK
#define TMR_LOAD			0xF8000000

XGpio LEDInst, BTNInst;
XScuGic INTCInst;
XTmrCtr TMRInst;
static int led_data;
static int btn_value;
static int tmr_count;

XScuTimer Timer; /* Cortex A9 SCU Private Timer Instance */
void delay(void);
void MoveBallRight(void);
void MoveBallLeft(void);
static void BTN_Intr_Handler(void *baseaddr_p);
static void TMR_Intr_Handler(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr,
		XGpio *GpioInstancePtr);


#define ONE_TENTH 32500000 // half of the CPU clock speed/10
#define START 1
#define STOP 0
#define LEFT 0
#define RIGHT 1
#define RESETBUTTON 0b0100
#define STARTBUTTON 0b0010
#define LEFTPADDLE 0b1000
#define RIGHTPADDLE 0b0001



int psb_check, dip_check, dip_check_prev, LedState, Status, count;
XGpio dip, push;
// PS Timer related definitions
XScuTimer_Config *ConfigPtr;
XScuTimer *TimerInstancePtr = &Timer;
int LED_PATTERNS[4] = { 0b1000, 0b0100, 0b0010, 0b0001 };
int scoreright, scoreleft;
char GameOver, StartDirection;

int main(void) {
	unsigned int i;

	//initialize variables, timers, ports
	xil_printf("-- Start of the Ping Pong Program --\r\n");
	GameOver = STOP;
	scoreright = 0;
	scoreleft = 0;
	xil_printf("Score Left = %d   Score Right = %d\r\n", scoreleft, scoreright);
	StartDirection = LEFT;

	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;
	XScuTimer *TimerInstancePtr = &Timer;

	XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID);
	XGpio_SetDataDirection(&dip, 1, 0xffffffff);

	XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID);
	XGpio_SetDataDirection(&push, 1, 0xffffffff);
	// Set LEDs direction to outputs
	XGpio_SetDataDirection(&LEDInst, 1, 0x00);
	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);
	// Initialize the timer
	ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	Status = XScuTimer_CfgInitialize(TimerInstancePtr, ConfigPtr,
			ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		xil_printf("Timer init() failed\r\n");
		return XST_FAILURE;
	}
	Status = XTmrCtr_Initialize(&TMRInst, TMR_DEVICE_ID);
	if (Status != XST_SUCCESS)
		return XST_FAILURE;
	XTmrCtr_SetHandler(&TMRInst, TMR_Intr_Handler, &TMRInst);
	XTmrCtr_SetResetValue(&TMRInst, 0, (dip_check_prev + 1) * TMR_LOAD);
	XTmrCtr_SetOptions(&TMRInst, 0,
	XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

	Status = IntcInitFunction(INTC_DEVICE_ID, &TMRInst, &BTNInst);
		if (Status != XST_SUCCESS)
			return XST_FAILURE;

		XTmrCtr_Start(&TMRInst, 0);

		GameOver = STOP;
		StartDirection = LEFT;
		scoreright = 0;
		scoreleft = 0;
		xil_printf("Score Left = %d   Score Right = %d\r\n", scoreright, scoreleft);
	while (1)
	{
		// Read push buttons and reset score if Button 2 is pressed
		psb_check = XGpio_DiscreteRead(&push, 1);
		if (psb_check == RESETBUTTON)	//reset game
				{
			xil_printf("\n\rNew Game - Scores Reset\r\n");
			GameOver = STOP;
			scoreleft = 0;
			scoreright = 0;
		}
		if (psb_check == STARTBUTTON) {
			GameOver = START;	//start game
			xil_printf("mememememem\n");
		}
		if (GameOver == START) {
			//start the game and follow StartDirection}
			if (StartDirection == RIGHT) {
				delay();
				MoveBallLeft();
			} else {
				delay();
				MoveBallRight();
			}
		}
	} //while(1)
} //main()

void MoveBallRight(void) {
	char i, EarlyPress, leftScore, rightScore;
	EarlyPress = 0;
	count = 0;
	//move LED to the right
	while (1) {
		psb_check = XGpio_DiscreteRead(&push, 1);
		dip_check = XGpio_DiscreteRead(&dip, 1);
		if (dip_check != dip_check_prev) {
			xil_printf("DIP Switch Status %x, %x\r\n", dip_check_prev,
					dip_check);
			dip_check_prev = dip_check;
			// load timer with the new switch settings
			XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check_prev);
			count = 0;
		}
		if (XScuTimer_IsExpired(TimerInstancePtr)) {
			XScuTimer_ClearInterruptStatus(TimerInstancePtr);

			// output the count to LED and decrement the count
			LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0,
					LED_PATTERNS[count]);
			// stop after 4 LEDs all lit up once
			if (count > 3) {
				break;
			}
			if ((psb_check & RIGHTPADDLE) == LED_PATTERNS[count]) {
				EarlyPress = 0;
			} else {
				EarlyPress = 1;
			}
			count++;
		}
	}
	// check for button pushes
	if (EarlyPress == 1) {
		leftScore = scoreleft + 1;
		rightScore = scoreright;
		xil_printf("Score Left = %d\t Score Right = %d\r\n",
				leftScore, rightScore);
		GameOver = STOP;
	} else {
		//set StartDirection
		StartDirection = RIGHT;
		//set GameOver; display scores
		scoreright++;
		xil_printf("Score Left = %d\tScore Right = %d\r\n", scoreleft,
				scoreright);
	}
}

void MoveBallLeft(void) {
	char i, EarlyPress, leftScore, rightScore;
	count = 3;
	EarlyPress = 0;
	//move LED to the left
	while (1) {
		psb_check = XGpio_DiscreteRead(&push, 1);
		dip_check = XGpio_DiscreteRead(&dip, 1);
		if (dip_check != dip_check_prev) {
			xil_printf("DIP Switch Status %x, %x\r\n", dip_check_prev,
					dip_check);
			dip_check_prev = dip_check;
			// load timer with the new switch settings
			XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check_prev);
			count = 3;
		}
		if (XScuTimer_IsExpired(TimerInstancePtr)) {

			// clear status bit
			XScuTimer_ClearInterruptStatus(TimerInstancePtr);

			// stop after 4 LEDs all lit up once
			if (count < 0) {
				break;
			}

			// output the count to LED and decrement the count
			LED_IP_mWriteReg(XPAR_LED_IP_S_AXI_BASEADDR, 0,
					LED_PATTERNS[count]);
			if ((psb_check & 0b1000) == LED_PATTERNS[count]) {
				EarlyPress = 0;
			} else {
				EarlyPress = 1;
			}
			count--;
		}
	}
	// check for button pushes
	if (EarlyPress == 1) {
		leftScore = scoreleft;
		rightScore = scoreright + 1;
		xil_printf("Game Over! Score Left = %d   Score Right = %d\r\n",
				leftScore, rightScore);
		StartDirection=LEFT;
		GameOver = STOP;

	} else {
		//set StartDirection
		StartDirection = LEFT;
		//set GameOver; display scores
		scoreleft++;
		xil_printf("Score Left = %d   Score Right = %d\r\n", scoreleft,
				scoreright);
	}
}

void delay(void) {
	// Read dip switch values
	dip_check = XGpio_DiscreteRead(&dip, 1);
	// Load timer with delay in multiple of ONE_T
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check_prev);
	// Set AutoLoad mode
	XScuTimer_EnableAutoReload(TimerInstancePtr);
	// Start the timer
	XScuTimer_Start(TimerInstancePtr);
}

void BTN_Intr_Handler(void *InstancePtr) {
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) != BTN_INT) {
		return;
	}
	btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	//BTN 2 is pressed, clear score and reset
	if (btn_value == RESETBUTTON){
		xil_printf("\n\rScores Reset\r\n");
		scoreright = 0;
		scoreleft = 0;
		xil_printf("Score Left = %d   Score Right = %d\r\n", scoreright,
				scoreleft);
		GameOver = STOP;
		XGpio_DiscreteWrite(&LEDInst, 1, 0);
		dip_check = XGpio_DiscreteRead(&dip, 1);
		if (dip_check != dip_check_prev) {
			dip_check_prev = dip_check;
		}
		XTmrCtr_SetResetValue(&TMRInst, 0, (dip_check_prev + 1) * TMR_LOAD);
		XTmrCtr_Start(&TMRInst, 0);
	}
	//BTN1 is pressed, serve a ball
	else if (btn_value == STARTBUTTON) {
		xil_printf("Game Starts!\r\n");
		GameOver = START;

		StartDirection = LEFT;
		led_data = 4;

		XGpio_DiscreteWrite(&LEDInst, 1, LED_PATTERNS[led_data]);
		dip_check = XGpio_DiscreteRead(&dip, 1);
		if (dip_check != dip_check_prev) {
			dip_check_prev = dip_check;
		}
		XTmrCtr_SetResetValue(&TMRInst, 0, (dip_check_prev + 1) * TMR_LOAD);
		XTmrCtr_Start(&TMRInst, 0);
	} else if (btn_value == RIGHTPADDLE) {
		if (GameOver == START) {
			//Early Press
			if (led_data <= 2) {
				xil_printf(
						"Early Press! Score Left = %d   Score Right = %d\r\n",
						scoreright, scoreleft);
				scoreright++;
				GameOver = STOP;
				led_data = 4;
			} else {
				scoreright++;
				xil_printf("Score Left = %d   Score Right = %d\r\n", scoreright,
						scoreleft);
				StartDirection = LEFT;
			}
		}
	} else if (btn_value == LEFTPADDLE) {
		if (GameOver == START) {
			if (led_data > 0) {
				scoreleft += 1;
				xil_printf(
						"Early Press! Score Left = %d   Score Right = %d\r\n",
						scoreright, scoreleft);
				GameOver = STOP;
				led_data = -1;
			} else {
				scoreleft++;
				xil_printf("Score Left = %d   Score Right = %d\r\n", scoreright,
						scoreleft);
				StartDirection = RIGHT;
			}
		}
	}

	// Interrupts enable
	(void) XGpio_InterruptClear(&BTNInst, BTN_INT);
		XGpio_InterruptEnable(&BTNInst, BTN_INT);
	}

void TMR_Intr_Handler(void *data) {
	if (XTmrCtr_IsExpired(&TMRInst, 0)) {
		if (GameOver == START) {
			if (StartDirection == RIGHT) {
				if (led_data < 3) {
					led_data++;
				} else {
					scoreright++;
					xil_printf(
							"Game Over! Score Left = %d   Score Right = %d\r\n",
							scoreright, scoreleft);
					GameOver = STOP;
				}

			} else {
				if (led_data > 0) {
					led_data--;
				} else {
					scoreleft++;
					xil_printf(
							"Game Over! Score Left = %d   Score Right = %d\r\n",
							scoreright, scoreleft);

					GameOver = STOP;

				}

			}

			XGpio_DiscreteWrite(&LEDInst, 1, LED_PATTERNS[led_data]);
		} else {
			XGpio_DiscreteWrite(&LEDInst, 1, 0b0000);
		}
		XTmrCtr_Reset(&TMRInst, 0);
		XTmrCtr_Start(&TMRInst, 0);
	}
}

int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr,
		XGpio *GpioInstancePtr) {
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialisation
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig,
			IntcConfig->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst,
	INTC_GPIO_INTERRUPT_ID, (Xil_ExceptionHandler) BTN_Intr_Handler,
			(void *) GpioInstancePtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Connect timer interrupt to handler
	status = XScuGic_Connect(&INTCInst,
	INTC_TMR_INTERRUPT_ID, (Xil_ExceptionHandler) TMR_Intr_Handler,
			(void *) TmrInstancePtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);

	XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);

	return XST_SUCCESS;
}


