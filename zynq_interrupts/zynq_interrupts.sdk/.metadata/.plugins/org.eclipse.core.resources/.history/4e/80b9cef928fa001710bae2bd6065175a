//pingpong template file for ECE530 Lab #6
#include "xparameters.h"
#include "xgpio.h"
// Include scutimer header file
#include "XScuTimer.h"
#include "xtmrctr.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"

//====================================================

// Parameter definitions
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID
#define TMR_DEVICE_ID		XPAR_TMRCTR_0_DEVICE_ID
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define LEDS_DEVICE_ID		XPAR_AXI_GPIO_1_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define INTC_TMR_INTERRUPT_ID XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR

#define BTN_INT 			XGPIO_IR_CH1_MASK
//#define TMR_LOAD			0xF8000000
#define TMR_LOAD 0x7FB3B4C0

#define ONE_TENTH 32500000 // half of the CPU clock speed/10
#define START 1
#define STOP 0
#define LEFT 0
#define RIGHT 1
#define RESETBUTTON 0b0100
#define STARTBUTTON 0b0010
#define LEFTPADDLE 0b1000
#define RIGHTPADDLE 0b0001

XGpio LEDInst, BTNInst;
XScuGic INTCInst;
XTmrCtr TMRInst;
static int led_data;
static int btn_value;
static int tmr_count;

XScuTimer Timer; /* Cortex A9 SCU Private Timer Instance */
void delay(void);
void MoveBallRight(void);
void MoveBallLeft(void);
static void BTN_Intr_Handler(void *baseaddr_p);
static void TMR_Intr_Handler(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr,
		XGpio *GpioInstancePtr);

int psb_check, dip_check, dip_check_prev, LedState, Status, count;
XGpio dip, push;
// PS Timer related definitions
XScuTimer_Config *ConfigPtr;
XScuTimer *TimerInstancePtr = &Timer;
int LED_PATTERNS[4] = { 0b1000, 0b0100, 0b0010, 0b0001 };
int scoreright, scoreleft;
char GameOver, StartDirection,EarlyPress;

int main(void) {
	unsigned int i;

	//initialize variables, timers, ports
	xil_printf("-- Start of the Ping Pong Program --\r\n");
	GameOver = STOP;
	scoreright = 0;
	scoreleft = 0;
	xil_printf("Score Left = %d   Score Right = %d\r\n", scoreleft, scoreright);
	StartDirection = LEFT;
	int status;

	// PS Timer related definitions
	XScuTimer_Config *ConfigPtr;
	XScuTimer *TimerInstancePtr = &Timer;

	status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
		if (status != XST_SUCCESS)
			return XST_FAILURE;
		// Initialise Push Buttons
		status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
		if (status != XST_SUCCESS)
			return XST_FAILURE;
		XGpio_Initialize(&dip, XPAR_AXI_GPIO_2_DEVICE_ID);
		XGpio_SetDataDirection(&dip, 1, 0xFF);
		// Set LEDs direction to outputs
		XGpio_SetDataDirection(&LEDInst, 1, 0x00);
		// Set all buttons direction to inputs
		XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

		//----------------------------------------------------
		// SETUP THE TIMER
		//----------------------------------------------------
		dip_check = XGpio_DiscreteRead(&dip, 1);
		status = XTmrCtr_Initialize(&TMRInst, TMR_DEVICE_ID);
		if (status != XST_SUCCESS)
			return XST_FAILURE;
		XTmrCtr_SetHandler(&TMRInst, TMR_Intr_Handler, &TMRInst);
		XTmrCtr_SetResetValue(&TMRInst, 0, (dip_check + 1) * TMR_LOAD);
		XTmrCtr_SetOptions(&TMRInst, 0,
		XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

		// Initialize interrupt controller
		status = IntcInitFunction(INTC_DEVICE_ID, &TMRInst, &BTNInst);
		if (status != XST_SUCCESS)
			return XST_FAILURE;

		XTmrCtr_Start(&TMRInst, 0);
	while (1){
	} //while(1)
	return 0;
} //main()


void delay(void) {
	// Read dip switch values
	dip_check = XGpio_DiscreteRead(&dip, 1);
	// Load timer with delay in multiple of ONE_T
	XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*dip_check_prev);
	// Set AutoLoad mode
	XScuTimer_EnableAutoReload(TimerInstancePtr);
	// Start the timer
	XScuTimer_Start(TimerInstancePtr);
}

void BTN_Intr_Handler(void *InstancePtr) {
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
		// Ignore additional button presses
		if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) !=  BTN_INT) {
			return;
		}
		btn_value = XGpio_DiscreteRead(&BTNInst, 1);
		dip_check = XGpio_DiscreteRead(&dip, 1);
		if (dip_check != dip_check_prev) {
			dip_check_prev = dip_check;
		}

		if (btn_value == RESETBUTTON) {
			GameOver = STOP;
			scoreright = 0;
			scoreleft = 0;
			xil_printf("\n\rNew Game - Scores Reset\r\n");
			xil_printf("Score Left = %d   Score Right = %d\r\n", scoreleft,
										scoreright);
			XGpio_DiscreteWrite(&LEDInst, 1, 0);
			XTmrCtr_SetResetValue(&TMRInst, 0, (dip_check_prev + 1) * TMR_LOAD);
			XTmrCtr_Start(&TMRInst, 0);
		} else if (btn_value == STARTBUTTON) {
			GameOver = START;
			xil_printf("Game Starts\r\n");
			if(StartDirection==LEFT){
				led_data=4;
			}else{
				led_data=-1;
			}
			XGpio_DiscreteWrite(&LEDInst, 1, 0);
			XTmrCtr_SetResetValue(&TMRInst, 0, (dip_check_prev + 1) * TMR_LOAD);
			XTmrCtr_Start(&TMRInst, 0);
		} else if (btn_value == RIGHTPADDLE) {
			if (GameOver == START) {
				if ((btn_value & RIGHTPADDLE) == LED_PATTERNS[led_data]) {
					EarlyPress = 0;
				} else {
					EarlyPress = 1;
				}
				if (EarlyPress == 0) {
					StartDirection = LEFT;
					xil_printf("Score Left = %d   Score Right = %d\r\n", scoreleft,
							scoreright);
				} else {
					GameOver = STOP;
					scoreleft++;
					xil_printf(
							"Game Over! Early Press!!! Score Left = %d   Score Right = %d\r\n",
							scoreleft, scoreright);
					XGpio_DiscreteWrite(&LEDInst, 1, 0);


				}
			}
		} else if (btn_value == LEFTPADDLE) {
			if (GameOver == START) {
				if ((btn_value & LEFTPADDLE) == LED_PATTERNS[led_data]) {
					EarlyPress = 0;

				} else {
					EarlyPress = 1;
				}
				if (EarlyPress == 0) {
					StartDirection = RIGHT;
					xil_printf("Score Left = %d   Score Right = %d\r\n", scoreleft,
							scoreright);
				} else {
					GameOver = STOP;
					scoreright++;
					xil_printf(
							"Game Over! Early Press!!! Score Left = %d   Score Right = %d\r\n",
							scoreleft, scoreright);
					XGpio_DiscreteWrite(&LEDInst, 1, 0);


				}
			}
}

	// Interrupts enable
(void) XGpio_InterruptClear(&BTNInst, BTN_INT);
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
}

void TMR_Intr_Handler(void *data) {
	if (XTmrCtr_IsExpired(&TMRInst, 0)) {
		if (GameOver == START) {
			if (StartDirection == RIGHT) {
				if (led_data <= 3) {
					led_data++;
				} else {
					scoreright++;
					xil_printf(
							"Game Over! Score Left = %d   Score Right = %d\r\n",
							scoreright, scoreleft);
					GameOver = STOP;
				}

			} else {
				if (led_data >= 0) {
					led_data--;
				} else {
					scoreleft++;
					xil_printf("Game Over! Score Left = %d   Score Right = %d\r\n",
							scoreright, scoreleft);
					GameOver = STOP;
				}
			}

			XGpio_DiscreteWrite(&LEDInst, 1, LED_PATTERNS[led_data]);
		} else {
			XGpio_DiscreteWrite(&LEDInst, 1, 0b0000);
		}
		XTmrCtr_Reset(&TMRInst, 0);
		XTmrCtr_Start(&TMRInst, 0);
	}
}

int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr,
		XGpio *GpioInstancePtr) {
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialisation
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig,
			IntcConfig->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst,
	INTC_GPIO_INTERRUPT_ID, (Xil_ExceptionHandler) BTN_Intr_Handler,
			(void *) GpioInstancePtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Connect timer interrupt to handler
	status = XScuGic_Connect(&INTCInst,
	INTC_TMR_INTERRUPT_ID, (Xil_ExceptionHandler) TMR_Intr_Handler,
			(void *) TmrInstancePtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);

	XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);

	return XST_SUCCESS;
}

int InterruptSystemSetup(XScuGic *XScuGicInstancePtr) {
	// Enable interrupt
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTNInst);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler,
			XScuGicInstancePtr);
	Xil_ExceptionEnable();

	return XST_SUCCESS;

}


